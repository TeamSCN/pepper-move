<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Explore" id="3" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="263" y="578"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[#! /usr/bin/env python
# -*- encoding: UTF-8 -*-

"""Example: Use explore method."""

import qi
import sys
import numpy
import csv
import Image
import math
import time
import datetime
import os


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        self.stop_flg = True

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        ip = "pepper.local"
        port = 9559
        self.stop_flg = False

        session = qi.Session()
        try:
            session.connect("tcp://" + ip + ":" + str(port))
        except RuntimeError:
            print ("Can't connect to Naoqi at ip \"" + ip + "\" on port " + str(port) +".\n"
                   "Please check your script arguments. Run with -h option for help.")
            sys.exit(1)
        self.logger.info("はろー")

        # self.explore(session)

        path = '/home/nao/.local/share/Explorer/2017-10-14T024423.603Z.explo'
        # self.saveMapAsNumpy(session, path)
        start_pos = [0., 0., 0.]
        dest = [4.0, -6.00, 0.]
        # dest = [0.0, -5.00, 0.]
        position, move_hist = self.moveInMap(session, path, start_pos, dest)
        self.saveMoveHist(path, move_hist)
        self.logger.info('I start to go back to the start position!')
        position, move_hist = self.moveInMap(session, path, position, start_pos)
        self.logger.info('finish!')
        self.logger.info('final position:' + str(position))

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def explore(self, session):
        """
        This example uses the explore method.
        """
        self.logger.info("lets go")

        # Get the services ALNavigation and ALMotion.
        self.navigation_service = session.service("ALNavigation")
        self.motion_service = session.service("ALMotion")

        # Wake up robot
        self.motion_service.wakeUp()

        # Explore the environement, in a radius of 2 m.
        radius = 25.0
        self.logger.info(type(self.navigation_service))
        error_code = self.navigation_service.explore(radius)
        self.logger.info(error_code)
        if error_code != 0:
            self.logger.info("Exploration failed.")
            return
        # Saves the exploration on disk
        path = self.navigation_service.saveExploration()
        self.logger.info( "Exploration saved at path: \"" + path + "\"" )
        self.navigation_service.loadExploration(path)
        # Start localization to navigate in map
        self.navigation_service.startLocalization()
        # Come back to initial position
        #error_code = self.navigation_service.findFreeZone(3.0, 1.0)
        #self.logger.info(error_code)
        #if error_code[0] != 0:
        #    self.logger.info("Free zone not found.")
        self.navigation_service.navigateToInMap([0., 0., 0.])
        # Stop localization
        self.navigation_service.stopLocalization()
        self.logger.info( "finish!" )
        # Retrieve and display the map built by the robot
        result_map = self.navigation_service.getMetricalMap()
        map_width = result_map[1]
        map_height = result_map[2]
        img = numpy.array(result_map[4]).reshape(map_width, map_height)
        img = (100 - img) * 2.55 # from 0..100 to 255..0
        img = numpy.array(img, numpy.uint8)
        # img_url = path.rsplit('/', 1)[0] + '/image.jpg'
        img_url = path.replace('explo', 'jpg')

        Image.frombuffer('L',  (map_width, map_height), img, 'raw', 'L', 0, 1).save(img_url, 'JPEG')

        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = None
        try:
            tabletService = session.service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        if tabletService:
            try:
                #url = self.getParameter("ImageUrl")
                if img_url == '':
                    self.logger.error("URL of the image is empty")
                import os
                if not img_url.startswith('http'):
                    subPath = os.path.join(self.packageUid(), os.path.normpath(img_url).lstrip("\\/"))
                    #subPath = os.path.normpath(img_url).lstrip("\\/")
                    # We create TabletService here in order to avoid
                    # problems with connections and disconnections of the tablet during the life of the application
                    img_url = "http://%s/apps/%s" %("pepper.local.", subPath.replace(os.path.sep, "/"))
                #img_url = path.rsplit('/', 1)[0] + "pengin.jpg"
                self.logger.info(img_url)
                flg = tabletService.showImageNoCache(img_url)
                if flg:
                    self.logger.info('Success!')
                else:
                    self.logger.info('Fail!')
            except Exception as err:
                self.logger.error("Error during ShowImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't display the image.")
            self.onStopped()

    def moveInMap(self, session, path, start_pos, dest):
        self.navigation_service = session.service("ALNavigation")
        self.motion_service = session.service("ALMotion")
        self.motion_service.wakeUp()
        self.navigation_service.loadExploration(path)
        self.navigation_service.relocalizeInMap(start_pos)
        # result_map = self.navigation_service.getMetricalMap()
        # self.logger.info(result_map)
        self.logger.info('Start time: ' + time.ctime())
        start_time = time.time()
        time_out = 600
        allowable_err = 1.0
        move_hist = [[start_pos[0], start_pos[1], start_pos[2], 0.0]]
        position = start_pos
        while True:
            self.navigation_service.startLocalization()
            self.navigation_service.navigateToInMap(dest)
            position = self.navigation_service.getRobotPositionInMap()[0]
            self.navigation_service.stopLocalization()
            elapsed_time = time.time() - start_time
            move_hist.append([position[0], position[1], position[2], elapsed_time])
            if math.sqrt((dest[0]-position[0])**2 + (dest[1]-position[1])**2) < allowable_err \
                or elapsed_time > time_out or self.stop_flg:
                break
            else:
                self.logger.info('I\'m in ' + str(position) + '.  elapsed_time(s):' + str(elapsed_time))

        # self.logger.info('move_hist:' + str(move_hist))
        if self.stop_flg:
            self.logger.info('Stopped!  I did not reach destination('+str(dest)+').  I\'m in ' + str(position) + '.  Sorry!')
        elif elapsed_time <= time_out:
            self.logger.info('I reached destination('+str(position)+') in '+str(elapsed_time)+' seconds')
        else:
            self.logger.info('Timeout!  I did not reach destination('+str(dest)+').  I\'m in ' + str(position) + '.  Sorry!')

        return position, move_hist

    def saveMoveHist(self, path, move_hist):
        todaydetail = datetime.datetime.today()
        dir_name = '/home/nao/.local/share/Explorer/MoveHist/' \
                    + path.rsplit('/', 1)[1].replace('.explo', '')
        try:
            os.makedirs(dir_name)
        except:
            pass
        fname = dir_name + '/' + todaydetail.strftime("%Y%m%d%H%M%S") + '.csv'
        with open(fname, 'w') as f:
            writer = csv.writer(f, lineterminator='\n')
            writer.writerows(move_hist)
        self.logger.info('Saved ' + fname)


    def saveMapAsNumpy(self, session, path):
        self.navigation_service = session.service("ALNavigation")
        self.navigation_service.loadExploration(path)
         # Retrieve and display the map built by the robot
        result_map = self.navigation_service.getMetricalMap()
        self.logger.info(result_map)
        map_width = result_map[1]
        map_height = result_map[2]
        img = numpy.array(result_map[4]).reshape(map_width, map_height)
        img = (100 - img) * 2.55 # from 0..100 to 255..0
        img = numpy.array(img, numpy.uint8)
        # img_url = path.rsplit('/', 1)[0] + '/image.npy'
        img_url = path.replace('explo', 'npy')
        numpy.save(img_url, img)
        self.logger.info(img)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Show Image" id="13" localization="8" tooltip="display an image on the screen&#x0A;&#x0A;V1.0.0&#x0A;" x="504" y="577"><bitmap>media/images/box/interaction/rec_movie.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def _getAbsoluteUrl(self, partial_url):
        import os
        subPath = os.path.join(self.packageUid(), os.path.normpath(partial_url).lstrip("\\/"))
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        return "http://%s/apps/%s" %(self._getTabletService().robotIp(), subPath.replace(os.path.sep, "/"))

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                url = self.getParameter("ImageUrl")
                if url == '':
                    self.logger.error("URL of the image is empty")
                if not url.startswith('http'):
                    url = self._getAbsoluteUrl(url)
                tabletService.showImage(url)
            except Exception as err:
                self.logger.error("Error during ShowImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't display the image.")
            self.onStopped()

    def onInput_onHideImage(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                tabletService.hideImage()
            except Exception as err:
                self.logger.error("Error during HideImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't hide the image.")
            self.onStopped()

    def onInput_onPreLoadImage(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                partialUrl = self.getParameter("ImageUrl")
                fullUrl = self._getAbsoluteUrl(partialUrl)
                tabletService.preLoadImage(fullUrl)
            except Exception as err:
                self.logger.warning("Error during preLoadImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't preload the image.")
            self.onStopped()

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="onHideImage" type="1" type_size="1" nature="1" inner="0" tooltip="Hide the image when a signal is received on this input." id="4" /><Input name="onPreLoadImage" type="1" type_size="1" nature="1" inner="0" tooltip="Preload the image when a signal is received on this input." id="5" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" /><Parameter name="ImageUrl" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip='path of the image inside the &quot;html&quot; folder (e.g. &quot;/images/myimage.png&quot;' id="7" /></Box><Box name="Move Along" id="1" localization="8" tooltip="Move along a trajectory given by an attached .pmt file.&#x0A;&#x0A;V1.0.0&#x0A;" x="843" y="621"><bitmap>media/images/box/movement/walk_forward.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.motion = ALProxy("ALMotion")
        self.navigation = ALProxy("ALNavigation")

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.move(0., 0., 0.)

    def onInput_onStart(self):
        relativePath = self.getParameter("Planar Move Trajectory")
        if len(relativePath) == 0:
            self.failure()
            return

        behaviorPath = self.behaviorAbsolutePath()
        trajectoryPath = behaviorPath + relativePath

        trajectoryData = str()
        with open(trajectoryPath, 'r') as trajectoryFile:
            trajectoryData = trajectoryFile.read()
        trajectory = eval(trajectoryData)

        if trajectory[0] != "Composed": # dealing with trajectories with radius
            trajectory = trajectory[0]

        result = self.navigation.moveAlong(trajectory)
        if (result):
            self.success()
        else:
            self.failure()

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the trajectory was correctly executed." id="4" /><Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the trajectory was stopped to avoid collisions." id="5" /><Parameter name="Planar Move Trajectory" inherits_from_parent="0" content_type="4" value="" default_value="" tooltip="" id="6" /></Box><Box name="Obstacle Avoidance" id="4" localization="8" tooltip="Go forward and turn right when there is an obstacle." x="1075" y="445"><bitmap>media/images/box/movement/walk_forward.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        #~ self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        self.onStopped()
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="robotHasFallen" type="0" type_size="1" nature="4" stm_value_name="robotHasFallen" inner="1" tooltip="robotHasFallen desc" id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Set External Anti-Collision" id="4" localization="8" tooltip="Enable or disable the collision protection on some specific part of the robot&apos;s body with external environment.&#x0A;&#x0A;For example if the protection is enabled on his left arm he will move his arm all the&#x0A;same than when it is not but avoiding his other body parts." x="124" y="129"><bitmap>media/images/box/sensors/anti_collision.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.motion = ALProxy( "ALMotion" )

    def onUnload(self):
        pass

    def onInput_onSet(self):
        # is it enable or disable asked?
        enable = (self.getParameter("Action") == "Enable")
        # enable/disable collision protection
        self.motion.setExternalCollisionProtectionEnabled( self.getParameter("Body part"), enable )
        self.output() # activate output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The anti-collision feature is enabled or disabled when this input is stimulated." id="2" /><Output name="output" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" /><Parameter name="Body part" inherits_from_parent="0" content_type="3" value="Move" default_value="All" custom_choice="0" tooltip="Body part which avoids the collision." id="4"><Choice value="All" /><Choice value="Move" /><Choice value="Arms" /><Choice value="LArm" /><Choice value="RArm" /></Parameter><Parameter name="Action" inherits_from_parent="0" content_type="3" value="Enable" default_value="Enable" custom_choice="0" tooltip="Enable or disable the collision protection." id="5"><Choice value="Disable" /><Choice value="Enable" /></Parameter></Box><Box name="IsStanding" id="5" localization="8" tooltip="Uses ALRobotPosture to determine if the robot is standing or not." x="510" y="126"><bitmap>media/images/box/sensors/inertial_unit.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onGet(self):
        if (self.postureProxy.getPostureFamily() == "Standing") and (self.motionProxy.robotIsWakeUp()):
            self.onSuccess()
        else:
            self.onFaillure()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onGet" type="1" type_size="1" nature="1" inner="0" tooltip="" id="2" /><Output name="onSuccess" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" /><Output name="onFaillure" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" /></Box><Box name="Move To" id="6" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="332" y="124"><bitmap>media/images/box/movement/walk_forward.png</bitmap><script language="4"><content><![CDATA[import almath
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03
    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"), \
            self.getParameter("Distance Y (m)"), \
            self.getParameter("Theta (rad)"))
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"), \
            self.getParameter("Distance Y (m)"), \
            self.getParameter("Theta (rad)"))

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos \
            and abs(positionError.y) < self.positionErrorThresholdPos \
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" /><Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" /><Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="10" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" /><Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" /><Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" /><Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="9" /><Resource name="Legs" type="Lock" timeout="0" /></Box><Box name="Move To" id="1" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="693" y="197"><bitmap>media/images/box/movement/walk_forward.png</bitmap><script language="4"><content><![CDATA[import almath
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03
    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"), \
            self.getParameter("Distance Y (m)"), \
            self.getParameter("Theta (rad)"))
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"), \
            self.getParameter("Distance Y (m)"), \
            self.getParameter("Theta (rad)"))

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos \
            and abs(positionError.y) < self.positionErrorThresholdPos \
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" /><Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" /><Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="-0.1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" /><Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" /><Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" /><Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="9" /><Resource name="Legs" type="Lock" timeout="0" /></Box><Box name="Move To" id="2" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="476" y="403"><bitmap>media/images/box/movement/walk_forward.png</bitmap><script language="4"><content><![CDATA[import almath
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03
    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"), \
            self.getParameter("Distance Y (m)"), \
            self.getParameter("Theta (rad)"))
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"), \
            self.getParameter("Distance Y (m)"), \
            self.getParameter("Theta (rad)"))

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos \
            and abs(positionError.y) < self.positionErrorThresholdPos \
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" /><Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" /><Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" /><Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" /><Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="-0.4" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" /><Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="9" /><Resource name="Legs" type="Lock" timeout="0" /></Box><Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="5" outputowner="5" indexofoutput="4" /><Link inputowner="6" indexofinput="2" outputowner="4" indexofoutput="3" /><Link inputowner="5" indexofinput="2" outputowner="6" indexofoutput="4" /><Link inputowner="5" indexofinput="2" outputowner="6" indexofoutput="5" /><Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="3" /><Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="5" /><Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="4" /><Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="5" /><Link inputowner="0" indexofinput="5" outputowner="0" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline><Resource name="All motors" type="Stop on demand" timeout="1" /></Box><Box name="take Pic at intervals of 1m" id="2" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="619" y="109"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import math
import time
import datetime

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tracker = ALProxy( "ALTracker" )

        # look at parameter
        self.x = 0.0
        self.y = 0.0
        self.z = 0.0
        self.maxSpeed = 0.2
        self.useWholeBody = False
        self.frame = 0 #FRAME TORSO

        # take a picture
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }
        self.recordFolder = "/home/nao/recordings/cameras/attmgt"

    def onLoad(self):
        #put initialization code here
        self.bIsRunning = False
        try:
            self.photoCapture = ALProxy( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)
        self.motion = ALProxy("ALMotion")
        self.od = self.motion.getOrthogonalSecurityDistance()
        self.td = self.motion.getTangentialSecurityDistance()
        self.logger.info(str(self.od)+str(self.td))
        self.motion.setOrthogonalSecurityDistance(0.1)
        self.motion.setTangentialSecurityDistance(0.01)


    def onUnload(self):
        #put clean-up code here
        self.motion.setOrthogonalSecurityDistance(self.od)
        self.motion.setTangentialSecurityDistance(self.td)

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        ip = "pepper.local"
        port = 9559

        session = qi.Session()
        try:
            session.connect("tcp://" + ip + ":" + str(port))
        except RuntimeError:
            print ("Can't connect to Naoqi at ip \"" + ip + "\" on port " + str(port) +".\n"
                   "Please check your script arguments. Run with -h option for help.")
            sys.exit(1)
        self.logger.info("はろー")

        route = [
                #[0.0, 0.0, 3.1415],
                [6.0, 0.0, 0.],
                [0.0, 0.0, -3.1415],
                [6.0, 0.0, 0.],
                [0.0, 0.0, -3.1415],
                ]
        self.navigation_service = session.service("ALNavigation")
        self.motion_service = session.service("ALMotion")

        # Wake up robot
        # self.motion_service.wakeUp()
        for dest in route:
            self.logger.info(dest)
            num_step = int(math.floor(dest[0]))
            y_step = 0
            if dest[0] != 0.0:
                y_step = dest[1] / dest[0]
                self.logger.info('[1.0, {0}, 0.] x {1}'.format(y_step, num_step))
                # 最初の位置の写真も撮影
                self.look_at_left()
                self.take_a_pic()
                self.look_at_forward()
                # x方向に1m進んだら写真を撮影
                for i in range(num_step):
                    self.motion_service.moveTo(1.0, y_step, 0.)
                    self.look_at_left()
                    self.take_a_pic()
                    self.look_at_forward()
            last_x_step = dest[0] - num_step
            last_y_step = y_step * last_x_step
            if last_x_step == 0 and last_y_step == 0:
                self.motion_service.moveToward(0., 0., dest[2]/3.1415)
            else:
                self.motion_service.moveTo(last_x_step, last_y_step, dest[2])
            time.sleep(1)
        self.logger.info('finish!')

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def look_at_left(self):
        self.x = 0.0
        self.y = 1.0
        self.z = 0.0
        self.tracker.lookAt([self.x, self.y, self.z], self.frame, self.maxSpeed, self.useWholeBody)

    def look_at_forward(self):
        self.x = 0.0
        self.y = 0.0
        self.z = 0.0
        self.tracker.lookAt([self.x, self.y, self.z], self.frame, self.maxSpeed, self.useWholeBody)

    def take_a_pic(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap['640 x 480']
        cameraID = self.cameraMap['Top']
        todaydetail = datetime.datetime.today()
        fileName = todaydetail.strftime("%Y%m%d%H%M%S")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("png")
            self.photoCapture.takePicture( self.recordFolder, fileName )
            self.logger.info('Take a Picture!')
        self.bIsRunning = False]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Take Picture" id="5" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="882" y="252"><bitmap>media/images/box/interaction/picture.png</bitmap><script language="4"><content><![CDATA[import time
import datetime

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = ALProxy( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap['640 x 480']
        cameraID = self.cameraMap['Top']
        todaydetail = datetime.datetime.today()
        fileName = todaydetail.strftime("%Y%m%d%H%M%S")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("png")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /><Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="640 x 480" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4"><Choice value="160 x 120" /><Choice value="320 x 240" /><Choice value="640 x 480" /><Choice value="1280 x 960" /></Parameter><Parameter name="File Name" inherits_from_parent="0" content_type="3" value="image" default_value="image" custom_choice="0" tooltip="Name of the file without its extension." id="5" /><Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6"><Choice value="Top" /><Choice value="Bottom" /></Parameter></Box><Box name="Look At Left" id="9" localization="-1" tooltip="This box makes the robot look at a desired position." x="725" y="371"><bitmap>media/images/box/movement/move_head.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tracker = ALProxy( "ALTracker" )

        self.x = 0.0
        self.y = 0.0
        self.z = 0.0

        self.maxSpeed = 0.5

        self.useWholeBody = False
        self.frame = 0 #FRAME TORSO

    def onLoad(self):
        self.BIND_PYTHON(self.getName(), "setParameter")

    def onUnload(self):
        pass

    def onInput_onStart(self):
        self.x = self.getParameter("X (m)")
        self.y = self.getParameter("Y (m)")
        self.z = self.getParameter("Z (m)")

        self.maxSpeed = self.getParameter("Speed (%)") / 100.0
        self.useWholeBody = self.getParameter("WholeBody")

        frameStr = self.getParameter("Frame")
        if frameStr == "Torso":
            self.frame = 0
        elif frameStr == "World":
            self.frame = 1
        elif frameStr == "Robot":
            self.frame = 2

        self.tracker.lookAt([self.x, self.y, self.z], self.frame, self.maxSpeed, self.useWholeBody)
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload()
        pass

    def setParameter(self, parameterName, newValue):
        GeneratedClass.setParameter(self, parameterName, newValue)

        if (parameterName == "X (m)"):
            self.x = newValue
            self.tracker.lookAt([self.x, self.y, self.z], self.frame, self.maxSpeed, self.useWholeBody)
            self.onStopped()
            return

        if (parameterName == "Y (m)"):
            self.y = newValue
            self.tracker.lookAt([self.x, self.y, self.z], self.frame, self.maxSpeed, self.useWholeBody)
            self.onStopped()
            return

        if (parameterName == "Z (m)"):
            self.z = newValue
            self.tracker.lookAt([self.x, self.y, self.z], self.frame, self.maxSpeed, self.useWholeBody)
            self.onStopped()
            return

        if (parameterName == "Speed (%)"):
            self.maxSpeed = newValue / 100.0
            return

        if (parameterName == "WholeBody"):
            self.useWholeBody = newValue
            return

        if (parameterName == "Frame"):
            if(newValue == "Torso"):
                self.frame = 0
            elif newValue == "World":
                self.frame = 1
            elif newValue == "Robot":
                self.frame = 2]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Parameter name="X (m)" inherits_from_parent="0" content_type="2" value="0.001" default_value="1" min="0.001" max="10" tooltip="X coordinate of the target to look at." id="5" /><Parameter name="Y (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0" min="-10" max="10" tooltip="Y coordinate of the target to look at." id="6" /><Parameter name="Z (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-10" max="10" tooltip="Z coordinate of the target to look at." id="7" /><Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="50" default_value="50" min="1" max="100" tooltip="Speed to move the head towards the desired position." id="8" /><Parameter name="WholeBody" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="Use whole body constraints" id="9" /><Parameter name="Frame" inherits_from_parent="0" content_type="3" value="Torso" default_value="Torso" custom_choice="0" tooltip="Select the frame of target." id="10"><Choice value="Torso" /><Choice value="World" /><Choice value="Robot" /></Parameter></Box><Box name="Look At right" id="7" localization="-1" tooltip="This box makes the robot look at a desired position." x="911" y="450"><bitmap>media/images/box/movement/move_head.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tracker = ALProxy( "ALTracker" )

        self.x = 0.0
        self.y = 0.0
        self.z = 0.0

        self.maxSpeed = 0.5

        self.useWholeBody = False
        self.frame = 0 #FRAME TORSO

    def onLoad(self):
        self.BIND_PYTHON(self.getName(), "setParameter")

    def onUnload(self):
        pass

    def onInput_onStart(self):
        self.x = self.getParameter("X (m)")
        self.y = self.getParameter("Y (m)")
        self.z = self.getParameter("Z (m)")

        self.maxSpeed = self.getParameter("Speed (%)") / 100.0
        self.useWholeBody = self.getParameter("WholeBody")

        frameStr = self.getParameter("Frame")
        if frameStr == "Torso":
            self.frame = 0
        elif frameStr == "World":
            self.frame = 1
        elif frameStr == "Robot":
            self.frame = 2

        self.tracker.lookAt([self.x, self.y, self.z], self.frame, self.maxSpeed, self.useWholeBody)
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload()
        pass

    def setParameter(self, parameterName, newValue):
        GeneratedClass.setParameter(self, parameterName, newValue)

        if (parameterName == "X (m)"):
            self.x = newValue
            self.tracker.lookAt([self.x, self.y, self.z], self.frame, self.maxSpeed, self.useWholeBody)
            self.onStopped()
            return

        if (parameterName == "Y (m)"):
            self.y = newValue
            self.tracker.lookAt([self.x, self.y, self.z], self.frame, self.maxSpeed, self.useWholeBody)
            self.onStopped()
            return

        if (parameterName == "Z (m)"):
            self.z = newValue
            self.tracker.lookAt([self.x, self.y, self.z], self.frame, self.maxSpeed, self.useWholeBody)
            self.onStopped()
            return

        if (parameterName == "Speed (%)"):
            self.maxSpeed = newValue / 100.0
            return

        if (parameterName == "WholeBody"):
            self.useWholeBody = newValue
            return

        if (parameterName == "Frame"):
            if(newValue == "Torso"):
                self.frame = 0
            elif newValue == "World":
                self.frame = 1
            elif newValue == "Robot":
                self.frame = 2]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Parameter name="X (m)" inherits_from_parent="0" content_type="2" value="0.001" default_value="1" min="0.001" max="10" tooltip="X coordinate of the target to look at." id="5" /><Parameter name="Y (m)" inherits_from_parent="0" content_type="2" value="-1" default_value="0" min="-10" max="10" tooltip="Y coordinate of the target to look at." id="6" /><Parameter name="Z (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-10" max="10" tooltip="Z coordinate of the target to look at." id="7" /><Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="20" default_value="50" min="1" max="100" tooltip="Speed to move the head towards the desired position." id="8" /><Parameter name="WholeBody" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="Use whole body constraints" id="9" /><Parameter name="Frame" inherits_from_parent="0" content_type="3" value="Robot" default_value="Torso" custom_choice="0" tooltip="Select the frame of target." id="10"><Choice value="Torso" /><Choice value="World" /><Choice value="Robot" /></Parameter></Box><Box name="Json server" id="10" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="245" y="43"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
import json
import datetime

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.json_folder = "/home/nao/recordings/json"

    def onLoad(self):
        self.httpd = None

    def onUnload(self):
        if self.httpd is not None:
            self.httpd.shutdown()
            self.httpd.server_close()

    def onInput_onStart(self):

        #HTTP リクエストを受信するポート番号 http://ロボットのIP:ポート番号/ でリクエストを受信します
        PORT = 8001

        self.logger.info('Start Server')
        MyHandler.setParent(self)
        self.httpd = HTTPServer(('', PORT), MyHandler)
        self.httpd.allow_reuse_address = True
        self.httpd.serve_forever()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        # self.onStopped(p) #activate the output of the box

    def do_POST(self, http):
        self.logger.info('received')
        self.logger.info('**POST**')
        content_len = int(http.headers.get('content-length'))
        self.logger.info('content_len: ' + str(content_len))
        requestBody = http.rfile.read(content_len).decode('utf-8')
        #self.logger.info(requestBody)
        #self.logger.info('requestBody=' + requestBody)
        json_data = json.loads(requestBody)
        self.logger.info('**JSON**')
        self.logger.info(json_data)
        todaydetail = datetime.datetime.today()
        file_name = todaydetail.strftime("%Y%m%d%H%M%S")
        with open(self.json_folder+'/'+file_name+'.json', 'wb') as f:
            json.dump(json_data, f, sort_keys=False, indent=4)
        http.send_response(200)
        http.send_header('Content-type', 'text/json')
        http.end_headers()
        if json_data['stop_flg'] == 1:
            self.logger.info('**STOP**')
            self.stop_server()
        else:
            self.logger.info('**SUCCESS**')
            self.success()

    # BaseHTTPServer.BaseHTTPRequestHandler を経由して HTTP GET リクエストがあった時呼ばれます
    # http オブジェクトの中に以下のドキュメントが示す内容が入っています
    # http://docs.python.jp/2/library/basehttpserver.html#BaseHTTPServer.BaseHTTPRequestHandler
#    def do_GET(self, http):

#        #ブラウザーからのリクエストの場合、実際のリクエストとは別に favicon.ico へのリクエストが来る、これは無視
#        if http.path.endswith('favicon.ico'):
#            return;

#        self.logger.info("request url:" + http.path)

#        http.send_response(200)
#        http.send_header("Content-type", "text/plain")
#        http.end_headers()
#        http.wfile.write("This is a test response")

class MyHandler(BaseHTTPRequestHandler):
    _parent = None

#    def do_GET(self):
#        MyHandler._parent.do_GET(self)

    def do_POST(self):
        MyHandler._parent.do_POST(self)


    @staticmethod
    def setParent(parent):
        MyHandler._parent = parent]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Output name="stop_server" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" /></Box><Box name="Move by Json and Take Photos" id="6" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="381" y="195"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import math
import time
import datetime
import json
import os
from glob import glob

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.tracker = ALProxy( "ALTracker" )

        # look at parameter
        self.x = 0.0
        self.y = 0.0
        self.z = 0.0
        self.maxSpeed = 0.2
        self.useWholeBody = False
        self.frame = 0 #FRAME TORSO

        # take a picture
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }
        self.record_dir = "/home/nao/recordings/cameras/attmgt"
        self.json_dir = "/home/nao/recordings/json"

    def onLoad(self):
        #put initialization code here
        self.bIsRunning = False
        try:
            self.photoCapture = ALProxy( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)
        self.motion = ALProxy("ALMotion")
        self.od = self.motion.getOrthogonalSecurityDistance()
        self.td = self.motion.getTangentialSecurityDistance()
        self.logger.info(str(self.od)+str(self.td))
        self.motion.setOrthogonalSecurityDistance(0.1)
        self.motion.setTangentialSecurityDistance(0.01)


    def onUnload(self):
        #put clean-up code here
        self.motion.setOrthogonalSecurityDistance(self.od)
        self.motion.setTangentialSecurityDistance(self.td)

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        ip = "pepper.local"
        port = 9559

        session = qi.Session()
        try:
            session.connect("tcp://" + ip + ":" + str(port))
        except RuntimeError:
            print ("Can't connect to Naoqi at ip \"" + ip + "\" on port " + str(port) +".\n"
                   "Please check your script arguments. Run with -h option for help.")
            sys.exit(1)
        self.logger.info("はろー")

        latest_json_file_name = self.get_latest_modified_file_path(self.json_dir)
        with open(latest_json_file_name, 'r') as f:
            route_dict = json.load(f)
#        route = [
#                #[0.0, 0.0, 3.1415],
#                [6.0, 0.0, 0.],
#                [0.0, 0.0, -3.1415],
#                [6.0, 0.0, 0.],
#                [0.0, 0.0, -3.1415],
#                ]
        route = [[route_dict['x'], route_dict['y'], route_dict['theta']]]
        self.navigation_service = session.service("ALNavigation")
        self.motion_service = session.service("ALMotion")

        # Wake up robot
        # self.motion_service.wakeUp()
        for dest in route:
            self.logger.info(dest)
            self.motion_service.moveTo(dest[0], dest[1], dest[2])
            time.sleep(1)
        self.look_at_left()
        self.take_a_pic()
        self.look_at_right()
        self.take_a_pic()
        self.look_at_forward()
        self.logger.info('Move finish!')

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def look_at_left(self):
        self.x = 0.0
        self.y = 1.0
        self.z = 0.0
        self.tracker.lookAt([self.x, self.y, self.z], self.frame, self.maxSpeed, self.useWholeBody)

    def look_at_right(self):
        self.x = 0.0
        self.y = -1.0
        self.z = 0.0
        self.tracker.lookAt([self.x, self.y, self.z], self.frame, self.maxSpeed, self.useWholeBody)

    def look_at_forward(self):
        self.x = 0.0
        self.y = 0.0
        self.z = 0.0
        self.tracker.lookAt([self.x, self.y, self.z], self.frame, self.maxSpeed, self.useWholeBody)

    def take_a_pic(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap['640 x 480']
        cameraID = self.cameraMap['Top']
        todaydetail = datetime.datetime.today()
        fileName = todaydetail.strftime("%Y%m%d%H%M%S")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("png")
            self.photoCapture.takePicture( self.record_dir, fileName )
            self.logger.info('Take a Picture!')
        self.bIsRunning = False

    def get_latest_modified_file_path(self, dirname):
        target = os.path.join(dirname, '*')
        files = [(f, os.path.getmtime(f)) for f in glob(target)]
        latest_modified_file_path = sorted(files, key=lambda files: files[1])[-1]
        return latest_modified_file_path[0]]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Json server including move" id="8" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="192" y="323"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
import json
import os
import datetime
import requests

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

        self.tracker = ALProxy( "ALTracker" )

        # look at parameter
        self.x = 0.0
        self.y = 0.0
        self.z = 0.0
        self.maxSpeed = 0.2
        self.useWholeBody = False
        self.frame = 0 #FRAME TORSO

        # take a picture
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }
        self.record_dir = "/home/nao/recordings/cameras/attmgt"
        self.json_dir = "/home/nao/recordings/json"


    def onLoad(self):
        self.httpd = None

        self.bIsRunning = False
        try:
            self.photoCapture = ALProxy( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)
        self.motion = ALProxy("ALMotion")
        self.od = self.motion.getOrthogonalSecurityDistance()
        self.td = self.motion.getTangentialSecurityDistance()
        self.logger.info(str(self.od)+str(self.td))
        self.motion.setOrthogonalSecurityDistance(0.1)
        self.motion.setTangentialSecurityDistance(0.01)

    def onUnload(self):
        self.motion.setOrthogonalSecurityDistance(self.od)
        self.motion.setTangentialSecurityDistance(self.td)

        if self.httpd is not None:
            self.logger.info('Server shutdown')
            self.httpd.shutdown()
            self.httpd.server_close()

    def onInput_onStart(self):

        #HTTP リクエストを受信するポート番号 http://ロボットのIP:ポート番号/ でリクエストを受信します
        PORT = 8001

        self.logger.info('Start Server')
        MyHandler.setParent(self)
        self.httpd = HTTPServer(('', PORT), MyHandler)
        self.httpd.allow_reuse_address = True
        self.httpd.serve_forever()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped(p) #activate the output of the box

    def do_POST(self, http):
        self.logger.info('received')
        self.logger.info('**POST**')
        content_len = int(http.headers.get('content-length'))
        self.logger.info('content_len: ' + str(content_len))
        requestBody = http.rfile.read(content_len).decode('utf-8')
        #self.logger.info(requestBody)
        #self.logger.info('requestBody=' + requestBody)
        json_data = json.loads(requestBody)
        self.logger.info('**JSON**')
        self.logger.info(json_data)
        todaydetail = datetime.datetime.today()
        file_name = todaydetail.strftime("%Y%m%d%H%M%S")
        with open(self.json_dir+'/'+file_name+'.json', 'wb') as f:
            json.dump(json_data, f, sort_keys=False, indent=4)
        self.logger.info('**SUCCESS**')
        self.move_take_photos()
        http.send_response(200)
        http.send_header('Content-type', 'text/json')
        http.end_headers()
        if json_data['stop_flg'] == 1:
            self.logger.info('**STOP**')
            self.stop_server()

    def move_take_photos(self):
        #self.onStopped() #activate the output of the box
        ip = "pepper.local"
        port = 9559

        session = qi.Session()
        try:
            session.connect("tcp://" + ip + ":" + str(port))
        except RuntimeError:
            print ("Can't connect to Naoqi at ip \"" + ip + "\" on port " + str(port) +".\n"
                   "Please check your script arguments. Run with -h option for help.")
            sys.exit(1)
        self.logger.info("はろー")

        latest_json_file_name = self.get_latest_modified_file_path(self.json_dir)
        with open(latest_json_file_name, 'r') as f:
            route_dict = json.load(f)
#        route = [
#                #[0.0, 0.0, 3.1415],
#                [6.0, 0.0, 0.],
#                [0.0, 0.0, -3.1415],
#                [6.0, 0.0, 0.],
#                [0.0, 0.0, -3.1415],
#                ]
        route = []
        self.logger.info(route_dict)
        for i in range(len(route_dict)-4):
            i = str(i)
            route.append([route_dict[i]['x'], route_dict[i]['y'], route_dict[i]['theta']])
        self.logger.info(route)
        self.navigation_service = session.service("ALNavigation")
        self.motion_service = session.service("ALMotion")

        # Wake up robot
        # self.motion_service.wakeUp()
        for dest in route:
            self.logger.info(dest)
            self.motion_service.moveTo(dest[0], dest[1], dest[2])
            time.sleep(1)
        if route_dict['photo_flg'] == 1:
            self.look_at_left()
            self.take_a_pic(route_dict)
            self.look_at_right()
            self.take_a_pic(route_dict)
            self.look_at_forward()
        self.logger.info('Move finish!')

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def look_at_left(self):
        self.x = 0.0
        self.y = 1.0
        self.z = 0.0
        self.tracker.lookAt([self.x, self.y, self.z], self.frame, self.maxSpeed, self.useWholeBody)

    def look_at_right(self):
        self.x = 0.0
        self.y = -1.0
        self.z = 0.0
        self.tracker.lookAt([self.x, self.y, self.z], self.frame, self.maxSpeed, self.useWholeBody)

    def look_at_forward(self):
        self.x = 0.0
        self.y = 0.0
        self.z = 0.0
        self.tracker.lookAt([self.x, self.y, self.z], self.frame, self.maxSpeed, self.useWholeBody)

    def take_a_pic(self, json):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap['640 x 480']
        cameraID = self.cameraMap['Top']
        todaydetail = datetime.datetime.today()
        fileName = todaydetail.strftime("%Y%m%d%H%M%S") + '_' + str(json['dest_x']) + '-' + str(json['dest_y']) + '.'
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("png")
            self.photoCapture.takePicture( self.record_dir, fileName )
            self.logger.info('Take a Picture!')
        self.send_image(os.path.join(self.record_dir, fileName[:-1]+'.png'))
        self.bIsRunning = False

    def send_image(self, file_name):
        url = "http://192.168.1.244/attmgt/image/"
        self.logger.info(file_name)
        files = {'image': open(file_name, "rb")}
        self.logger.info('Send image!')
        res = requests.post(url, files=files)
        self.logger.info(res)


    def get_latest_modified_file_path(self, dirname):
        target = os.path.join(dirname, '*')
        files = [(f, os.path.getmtime(f)) for f in glob(target)]
        latest_modified_file_path = sorted(files, key=lambda files: files[1])[-1]
        return latest_modified_file_path[0]


class MyHandler(BaseHTTPRequestHandler):
    _parent = None

#    def do_GET(self):
#        MyHandler._parent.do_GET(self)

    def do_POST(self):
        MyHandler._parent.do_POST(self)


    @staticmethod
    def setParent(parent):
        MyHandler._parent = parent



    # BaseHTTPServer.BaseHTTPRequestHandler を経由して HTTP GET リクエストがあった時呼ばれます
    # http オブジェクトの中に以下のドキュメントが示す内容が入っています
    # http://docs.python.jp/2/library/basehttpserver.html#BaseHTTPServer.BaseHTTPRequestHandler
#    def do_GET(self, http):

#        #ブラウザーからのリクエストの場合、実際のリクエストとは別に favicon.ico へのリクエストが来る、これは無視
#        if http.path.endswith('favicon.ico'):
#            return;

#        self.logger.info("request url:" + http.path)

#        http.send_response(200)
#        http.send_header("Content-type", "text/plain")
#        http.end_headers()
#        http.wfile.write("This is a test response")]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="stop_server" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" /></Box><Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" /><Link inputowner="5" indexofinput="2" outputowner="9" indexofoutput="4" /><Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="3" /><Link inputowner="6" indexofinput="2" outputowner="10" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="5" /><Link inputowner="10" indexofinput="2" outputowner="6" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="8" indexofoutput="4" /><Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>